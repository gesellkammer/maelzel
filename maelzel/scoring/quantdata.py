from . import quantutils

# A quantization preset consists of presetname.key, where needed keys are:
# divisionsByTempo and divisionPenaltyMap

defaultDivisionPenaltyMap = {
    1:0.0,  2:0.0,  3:0.0,  4:0.02, 5:0.02,
    6:0.02, 7:0.02, 8:0.02, 9:0.02, 10:0.04,
    11:0.1, 12:0.1, 13:0.2, 14:0.1, 15:0.1,
    16:0.4,
}


complexityPresets = {
    'highest': {
        'possibleDivisionsByTempo': {
            10: [],
            400: quantutils.allSubdivisions(maxsubdivs=6,
                                            possiblevals=(1, 2, 3, 4, 5, 6, 7, 8, 9, 11),
                                            maxdensity=30),
        },
        'divisionPenaltyMap': {
            1:0.0,  2:0.0,  3:0.0,  4:0.02, 5:0.02,
            6:0.02, 7:0.02, 8:0.02, 9:0.02, 10:0.04,
            11:0.1, 12:0.1, 13:0.2, 14:0.1, 15:0.1,
            16:0.4,
       },
        'nestedTuples': True,
        'numNestedTuplesPenalty': [0., 0.0, 0.0, 0.1, 0.4, 0.8],
        'gridErrorWeight': 0.5,
        'divisionErrorWeight': 0.05
    },
    'high': {
        'possibleDivisionsByTempo': {
            10: [],
            60: quantutils.allSubdivisions(maxsubdivs=6,
                                           possiblevals=(1, 2, 3, 4, 5, 6, 7, 8, 9, 11),
                                           maxdensity=24),
            80: quantutils.allSubdivisions(maxsubdivs=5,
                                           possiblevals=(1, 2, 3, 4, 5, 6, 7, 8, 9, 11),
                                           maxdensity=21),
            100: quantutils.allSubdivisions(maxsubdivs=4,
                                            possiblevals=(1, 2, 3, 4, 5, 6, 7, 8, 9),
                                            maxdensity=16),
            132: quantutils.allSubdivisions(maxsubdivs=4,
                                            possiblevals=(1, 2, 3, 4, 5, 6, 7, 8, 9),
                                            maxdensity=12),
            180: quantutils.allSubdivisions(maxsubdivs=3,
                                            possiblevals=(1, 2, 3, 4, 5, 6, 7, 8, 9),
                                            maxdensity=10),
            400: quantutils.allSubdivisions(maxsubdivs=3,
                                            possiblevals=(1, 2, 3, 4, 5, 6),
                                            maxdensity=8)
        },
        'divisionPenaltyMap': defaultDivisionPenaltyMap,
        'nestedTuples': True,
        'numNestedTuplesPenalty': [0, 0.0, 0.05, 0.4, 0.5, 0.8],
        'gridErrorWeight': 0.5,
        'divisionErrorWeight': 0.01,
        'cardinalityPenaltyWeight': 0
    },
    'medium': {
        'possibleDivisionsByTempo': {
            10: [],
            60: quantutils.allSubdivisions(maxsubdivs=4,
                                           possiblevals=(1, 2, 3, 4, 5, 6, 7, 8, 9, 11),
                                           maxdensity=20),
            80: quantutils.allSubdivisions(maxsubdivs=4,
                                           possiblevals=(1, 2, 3, 4, 5, 6, 7, 8, 9, 11),
                                           maxdensity=16),
            100: quantutils.allSubdivisions(maxsubdivs=3,
                                            possiblevals=(1, 2, 3, 4, 5, 6, 7, 8, 9),
                                            maxdensity=12),
            132: quantutils.allSubdivisions(maxsubdivs=3,
                                            possiblevals=(1, 2, 3, 4, 5, 6, 7, 8),
                                            maxdensity=8),
            180: quantutils.allSubdivisions(maxsubdivs=2,
                                            possiblevals=(1, 2, 3, 4, 5, 6, 8, 9),
                                            maxdensity=6),
            400: quantutils.allSubdivisions(maxsubdivs=1,
                                            possiblevals=(1, 2, 3, 4),
                                            maxdensity=4)
        },
        'divisionPenaltyMap': defaultDivisionPenaltyMap,
        'nestedTuples': False,
        'numNestedTuplesPenalty': [0, 0.0, 0.05, 0.4, 0.5, 0.8],
        'gridErrorWeight': 0.5,
        'divisionErrorWeight': 0.25
    },
    'low': {
        'possibleDivisionsByTempo': {
            10: [],
            60: quantutils.allPartitions(onsets=list(range(1, 14)),
                                         maxsubdivs=8,
                                         possiblevals=(1, 2, 3, 4, 5, 6, 8, 9, 10, 12),
                                         maxdensity=16),
            80: quantutils.allPartitions(onsets=list(range(1, 12)),
                                         maxsubdivs=8,
                                         possiblevals=(1, 2, 3, 4, 5, 6, 8, 9, 12),
                                         maxdensity=12),
            100: quantutils.allPartitions(onsets=list(range(1, 12)),
                                          maxsubdivs=6,
                                          possiblevals=(1, 2, 3, 4, 6, 7, 8, 12),
                                          maxdensity=10),
            132: quantutils.allPartitions(onsets=list(range(1, 10)),
                                          maxsubdivs=4,
                                          possiblevals=(1, 2, 3, 4, 6, 8),
                                          maxdensity=8),
            180: quantutils.allPartitions(onsets=list(range(1, 8)),
                                          maxsubdivs=3,
                                          possiblevals=(1, 2, 3, 4, 6),
                                          maxdensity=6),
            400: quantutils.allPartitions(onsets=(1, 2, 3, 4),
                                          maxsubdivs=2,
                                          possiblevals=(1, 2, 3, 4),
                                          maxdensity=4)
        },
        'divisionPenaltyMap': defaultDivisionPenaltyMap,
        'nestedTuples': False,
        'numNestedTuplesPenalty': [0, 0.0, 0.05, 0.4, 0.5, 0.8],
    },
}


__complexityPresets = {
    'highest': {
        'possibleDivisionsByTempo': {
            10: [],
            200: quantutils.allPartitions(onsets=list(range(1, 21)),
                                         maxsubdivs=8,
                                         possiblevals=(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16),
                                         maxdensity=0),
        },
        'divisionPenaltyMap': {
            1:0.0,  2:0.0,  3:0.0,  4:0.02, 5:0.02,
            6:0.02, 7:0.02, 8:0.02, 9:0.02, 10:0.04,
            11:0.1, 12:0.1, 13:0.2, 14:0.1, 15:0.1,
            16:0.4,
       },
        'nestedTuples': True,
        'numNestedTuplesPenalty': [0., 0.0, 0.0, 0.1, 0.4, 0.8],
        'gridErrorWeight': 0.5,
        'divisionErrorWeight': 0.05
    },
    'high': {
        'possibleDivisionsByTempo': {
            10: [],
            60: quantutils.allPartitions(onsets=list(range(1, 16)),
                                         maxsubdivs=5,
                                         possiblevals=(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14),
                                         maxdensity=22),
            80: quantutils.allPartitions(onsets=list(range(1, 16)),
                                         maxsubdivs=4,
                                         possiblevals=(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14),
                                         maxdensity=20),
            100: quantutils.allPartitions(onsets=list(range(1, 12)),
                                          maxsubdivs=4,
                                          possiblevals=(1, 2, 3, 4, 5, 6, 7, 8, 10, 12),
                                          maxdensity=16),
            132: quantutils.allPartitions(onsets=list(range(1, 12)),
                                          maxsubdivs=3,
                                          possiblevals=(1, 2, 3, 4, 5, 6, 8),
                                          maxdensity=12),
            180: quantutils.allPartitions(onsets=list(range(1, 8)),
                                          maxsubdivs=2,
                                          possiblevals=(1, 2, 3, 4, 5, 6),
                                          maxdensity=8),
            400: quantutils.allPartitions(onsets=(1, 2, 3, 4, 5),
                                          maxsubdivs=2,
                                          possiblevals=(1, 2, 3, 4),
                                          maxdensity=6)
        },
        'divisionPenaltyMap': defaultDivisionPenaltyMap,
        'nestedTuples': True,
        'numNestedTuplesPenalty': [0, 0.0, 0.05, 0.4, 0.5, 0.8],
        'gridErrorWeight': 0.5,
        'divisionErrorWeight': 0.05
    },
    'medium': {
        'possibleDivisionsByTempo': {
            10: [],
            60: quantutils.allPartitions(onsets=list(range(1, 15)),
                                         maxsubdivs=8,
                                         possiblevals=(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12),
                                         maxdensity=18),
            80: quantutils.allPartitions(onsets=list(range(1, 15)),
                                         maxsubdivs=8,
                                         possiblevals=(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12),
                                         maxdensity=14),
            100: quantutils.allPartitions(onsets=list(range(1, 12)),
                                          maxsubdivs=6,
                                          possiblevals=(1, 2, 3, 4, 5, 6, 7, 8, 10, 12),
                                          maxdensity=12),
            132: quantutils.allPartitions(onsets=list(range(1, 12)),
                                          maxsubdivs=4,
                                          possiblevals=(1, 2, 3, 4, 5, 6, 8),
                                          maxdensity=10),
            180: quantutils.allPartitions(onsets=list(range(1, 8)),
                                          maxsubdivs=4,
                                          possiblevals=(1, 2, 3, 4, 5, 6),
                                          maxdensity=6),
            400: quantutils.allPartitions(onsets=(1, 2, 3, 4),
                                          maxsubdivs=3,
                                          possiblevals=(1, 2, 3, 4),
                                          maxdensity=6)
        },
        'divisionPenaltyMap': defaultDivisionPenaltyMap,
        'nestedTuples': False,
        'numNestedTuplesPenalty': [0, 0.0, 0.05, 0.4, 0.5, 0.8],
    },
    'low': {
        'possibleDivisionsByTempo': {
            10: [],
            60: quantutils.allPartitions(onsets=list(range(1, 14)),
                                         maxsubdivs=8,
                                         possiblevals=(1, 2, 3, 4, 5, 6, 8, 9, 10, 12),
                                         maxdensity=16),
            80: quantutils.allPartitions(onsets=list(range(1, 12)),
                                         maxsubdivs=8,
                                         possiblevals=(1, 2, 3, 4, 5, 6, 8, 9, 12),
                                         maxdensity=12),
            100: quantutils.allPartitions(onsets=list(range(1, 12)),
                                          maxsubdivs=6,
                                          possiblevals=(1, 2, 3, 4, 6, 7, 8, 12),
                                          maxdensity=10),
            132: quantutils.allPartitions(onsets=list(range(1, 10)),
                                          maxsubdivs=4,
                                          possiblevals=(1, 2, 3, 4, 6, 8),
                                          maxdensity=8),
            180: quantutils.allPartitions(onsets=list(range(1, 8)),
                                          maxsubdivs=3,
                                          possiblevals=(1, 2, 3, 4, 6),
                                          maxdensity=6),
            400: quantutils.allPartitions(onsets=(1, 2, 3, 4),
                                          maxsubdivs=2,
                                          possiblevals=(1, 2, 3, 4),
                                          maxdensity=4)
        },
        'divisionPenaltyMap': defaultDivisionPenaltyMap,
        'nestedTuples': False,
        'numNestedTuplesPenalty': [0, 0.0, 0.05, 0.4, 0.5, 0.8],
    },
}

_complexityPresets = {
    # possibleDivisionsByTempo: divisions of a pulse, depending on the tempo for the given pulse
    # These are always simple pulses (quarter note, 8th note, etc.), the tempo key is the max. tempo
    # So the divisions given for 63 are possible between the previous tempo and 63
    'highest': {
        'possibleDivisionsByTempo': {
            10:[],
            72:[1,
                2,
                3,
                4, [1, 3],
                5, [2, 3], [1, 1, 3],
                6, [1, 5], [3, 3], [1, 1, 4], [1, 2, 3], [1, 1, 1, 3], [1, 1, 2, 2],
                7, [1, 6], [2, 5], [3, 4], [1, 1, 5], [1, 2, 4], [1, 3, 3], [2, 2, 3], [1, 1, 1, 4], [1, 1, 2, 3], [1, 1, 1, 1, 3],
                8, [1, 7], [2, 6], [3, 5], [1, 1, 6], [1, 2, 5], [1, 3, 4], [2, 3, 3], [1, 1, 1, 5], [1, 1, 2, 4], [1, 2, 2, 3],
                9, [1, 8], [2, 7], [3, 6], [4, 5], [1, 1, 7], [1, 2, 6], [1, 3, 5], [1, 4, 4], [2, 2, 5], [2, 3, 4],
                10, [1, 9], [2, 8], [3, 7], [4, 6], [5, 5], [1, 2, 7], [1, 3, 6], [1, 4, 5], [2, 2, 6], [2, 3, 5], [3, 3, 4],
                11, [3, 8], [4, 7], [5, 6], [1, 3, 7], [1, 4, 6], [1, 5, 5], [2, 2, 7], [2, 3, 6], [2, 4, 5], [3, 3, 5], [3, 4, 4], [2, 3, 3, 3],
                12, [3, 9], [5, 7], [6, 6], [2, 3, 7], [2, 4, 6], [2, 5, 5], [3, 3, 6], [3, 4, 5], [1, 2, 4, 5], [1, 3, 3, 5], [1, 3, 4, 4], [2, 2, 3, 5], [2, 3, 3, 4], [3, 3, 3, 3],
                [5, 8], [6, 7], [1, 5, 7], [2, 4, 7], [2, 5, 6], [3, 4, 7], [3, 5, 6], [4, 4, 5],
                14, [6, 8], [7, 7], [2, 5, 7], [2, 6, 6], [3, 5, 6], [4, 4, 6], [4, 5, 5], [2, 4, 4, 4], [3, 3, 4, 4],
                [1, 7, 7], [2, 6, 7], [3, 5, 7], [4, 4, 7], [3, 6, 6], [4, 5, 6], [5, 5, 5], [3, 4, 4, 4],
                [2, 7, 7], [3, 6, 7], [4, 5, 7], [4, 6, 6], [5, 5, 6], [4, 4, 4, 4],
                [3, 7, 7], [4, 6, 7], [5, 5, 7], [5, 6, 6],
                [4, 7, 7], [5, 6, 7], [6, 6, 6],
                [5, 7, 7], [6, 6, 7],
                [6, 7, 7],
                ],
            90:[1,
                2,
                3,
                4, [1, 3], [1, 1, 2],
                5, [2, 3], [1, 1, 3],
                6, [1, 5], [1, 1, 4], [1, 2, 3], [1, 1, 1, 3], [1, 1, 2, 2],
                7, [1, 6], [2, 5], [3, 4], [1, 1, 5], [1, 2, 4], [1, 3, 3], [2, 2, 3], [1, 1, 1, 4], [1, 1, 2, 3],
                8, [1, 7], [2, 6], [3, 5], [1, 1, 6], [1, 2, 5], [1, 3, 4], [2, 3, 3], [1, 1, 2, 4], [1, 2, 2, 3],
                9, [2, 7], [3, 6], [4, 5], [1, 2, 6], [1, 4, 4], [2, 2, 5], [2, 3, 4], [3, 3, 3],
                10, [3, 7], [4, 6], [5, 5], [2, 3, 5], [3, 3, 4],
                [4, 7], [5, 6], [2, 4, 5], [3, 3, 5],
                12, [2, 5, 5], [3, 4, 5], [4, 4, 4],
                ],
            120:[1,
                 2,
                 3,
                 4, [1, 3], [1, 1, 2],
                 5, [2, 3], [1, 1, 3], [1, 2, 2],
                 6, [1, 5], [1, 1, 4], [1, 2, 3], [1, 1, 1, 3], [1, 1, 2, 2],
                 7, [2, 5], [3, 4], [1, 2, 4], [1, 3, 3], [2, 2, 3],
                 8, [3, 5], [1, 3, 4], [2, 3, 3],
                 9, [4, 5], [2, 3, 4], [3, 3, 3],
                 10, [5, 5], [3, 3, 4],
                 [5, 6], [3, 4, 4]
                 ],
            140:[1,
                 2,
                 3,
                 4, [1, 3],
                 5, [2, 3],
                 6,
                 ],
            180:[1, 2, 3, 4, 6],
            400:[1, 2, 3, 4],
            999:[1, 2]
        },
        'divisionPenaltyMap': {
            1:0.0,
            2:0.0,
            3:0.0,
            4:0.02,
            5:0.02,
            6:0.02,
            7:0.02,
            8:0.02,
            9:0.02,
            10:0.04,
            11:0.1,
            12:0.1,
            13:0.2,
            14:0.1,
            16:0.4,
       },
        'nestedTuples': True,
        'numNestedTuplesPenalty': [0., 0.0, 0.0, 0.1, 0.4, 0.8],
        'gridErrorWeight': 0.5,
        'divisionErrorWeight': 0.05

    },
    'high': {
        'possibleDivisionsByTempo': {
            10: [1,
                 2,
                 3,
                 4, [1, 3],
                 5, [2, 3], [1, 1, 3],
                 6, [1, 5], [3, 3], [1, 1, 4], [1, 2, 3], [1, 1, 1, 3], [1, 1, 2, 2],
                 7, [1, 6], [2, 5], [3, 4], [1, 1, 5], [1, 2, 4], [1, 3, 3], [2, 2, 3], [1, 1, 1, 4], [1, 1, 2, 3],
                 [1, 1, 1, 1, 3],
                 8, [1, 7], [2, 6], [3, 5], [1, 1, 6], [1, 2, 5], [1, 3, 4], [2, 3, 3], [1, 1, 1, 5], [1, 1, 2, 4],
                 [1, 2, 2, 3],
                 9, [1, 8], [2, 7], [3, 6], [4, 5], [1, 1, 7], [1, 2, 6], [1, 3, 5], [1, 4, 4], [2, 2, 5], [2, 3, 4],
                 10, [1, 9], [2, 8], [3, 7], [4, 6], [5, 5], [1, 2, 7], [1, 3, 6], [1, 4, 5], [2, 2, 6], [2, 3, 5],
                 [3, 3, 4],
                 11, [3, 8], [4, 7], [5, 6], [1, 3, 7], [1, 4, 6], [1, 5, 5], [2, 2, 7], [2, 3, 6], [2, 4, 5],
                 [3, 3, 5], [3, 4, 4], [2, 3, 3, 3],
                 12, [3, 9], [5, 7], [6, 6], [2, 3, 7], [2, 4, 6], [2, 5, 5], [3, 3, 6], [3, 4, 5], [1, 2, 4, 5], [1, 3, 3, 5], [1, 3, 4, 4], [2, 2, 3, 5], [2, 3, 3, 4], [3, 3, 3, 3],
                 [5, 8], [6, 7], [1, 5, 7], [2, 4, 7], [2, 5, 6], [3, 4, 7], [3, 5, 6], [4, 4, 5],
                 14, [6, 8], [7, 7], [2, 5, 7], [2, 6, 6], [3, 5, 6], [4, 4, 6], [4, 5, 5], [2, 4, 4, 4], [3, 3, 4, 4],
                 [1, 7, 7], [2, 6, 7], [3, 5, 7], [4, 4, 7], [3, 6, 6], [4, 5, 6], [5, 5, 5], [3, 4, 4, 4],  # 15
                 [2, 7, 7], [3, 6, 7], [4, 5, 7], [4, 6, 6], [5, 5, 6], [4, 4, 4, 4],                        # 16
                 [3, 7, 7], [4, 6, 7], [5, 5, 7], [5, 6, 6],                                                 # 17
                 [4, 7, 7], [5, 6, 7], [6, 6, 6],                                                            # 18
                 [5, 7, 7], [6, 6, 7],                                                                       # 19
                 [6, 7, 7],                                                                                  # 20
                 ],
            63:[1,
                2,
                3,
                4, [1, 3],
                5, [2, 3], [1, 1, 3],
                6, [1, 5], [3, 3], [1, 1, 4], [1, 2, 3], [1, 1, 1, 3], [1, 1, 2, 2],
                7, [1, 6], [2, 5], [3, 4], [1, 1, 5], [1, 2, 4], [1, 3, 3], [2, 2, 3], [1, 1, 1, 4], [1, 1, 2, 3], [1, 1, 1, 1, 3],
                8, [1, 7], [2, 6], [3, 5], [1, 1, 6], [1, 2, 5], [1, 3, 4], [2, 3, 3], [1, 1, 1, 5], [1, 1, 2, 4], [1, 2, 2, 3],
                9, [1, 8], [2, 7], [3, 6], [4, 5], [1, 1, 7], [1, 2, 6], [1, 3, 5], [1, 4, 4], [2, 2, 5], [2, 3, 4], [3, 3, 3],
                10, [1, 9], [2, 8], [3, 7], [4, 6], [5, 5], [1, 2, 7], [1, 3, 6], [1, 4, 5], [2, 2, 6], [2, 3, 5], [3, 3, 4],
                11, [3, 8], [4, 7], [5, 6], [1, 3, 7], [1, 4, 6], [1, 5, 5], [2, 2, 7], [2, 3, 6], [2, 4, 5], [3, 3, 5], [3, 4, 4], [2, 3, 3, 3],
                12, [3, 9], [5, 7], [6, 6], [2, 3, 7], [2, 4, 6], [2, 5, 5], [3, 3, 6], [3, 4, 5], [1, 2, 4, 5], [1, 3, 3, 5], [1, 3, 4, 4], [2, 2, 3, 5], [2, 3, 3, 4], [3, 3, 3, 3],
                [5, 8], [6, 7], [1, 5, 7], [2, 4, 7], [2, 5, 6], [3, 4, 7], [3, 5, 6], [4, 4, 5],
                14, [6, 8], [7, 7], [2, 5, 7], [2, 6, 6], [3, 5, 6], [4, 4, 6], [4, 5, 5], [2, 4, 4, 4], [3, 3, 4, 4],
                ],
            80:[1,
                2,
                3,
                4, [1, 3],
                5, [2, 3], [1, 1, 3],
                6, [1, 5], [3, 3], [1, 1, 4], [1, 2, 3], [1, 1, 1, 3],
                7, [1, 6], [2, 5], [3, 4], [1, 1, 5], [1, 2, 4], [1, 3, 3], [2, 2, 3], [1, 1, 2, 3],
                8, [1, 7], [2, 6], [3, 5], [1, 1, 6], [1, 2, 5], [1, 3, 4], [2, 3, 3], [1, 2, 2, 3],
                9, [1, 8], [2, 7], [3, 6], [4, 5], [1, 3, 5], [1, 4, 4], [2, 2, 5], [2, 3, 4], [3, 3, 3],
                10, [1, 9], [2, 8], [3, 7], [4, 6], [5, 5], [1, 4, 5], [2, 3, 5], [3, 3, 4],
                11, [3, 8], [4, 7], [5, 6], [1, 5, 5], [2, 4, 5], [3, 3, 5], [3, 4, 4], [2, 3, 3, 3],
                12, [5, 7], [6, 6], [2, 5, 5], [3, 4, 5], [1, 3, 4, 4], [2, 3, 3, 4], [3, 3, 3, 3],
                [5, 8], [6, 7], [4, 4, 5],
                14, [6, 8], [7, 7], [4, 5, 5], [2, 4, 4, 4], [3, 3, 4, 4],
                ],
            100:[1,
                 2,
                 3,
                 4, [1, 3],
                 5, [2, 3], [1, 1, 3],
                 6, [1, 5], [3, 3], [1, 1, 4], [1, 2, 3], [1, 1, 1, 3],
                 7, [1, 6], [2, 5], [3, 4], [1, 2, 4], [1, 3, 3], [2, 2, 3],
                 8, [2, 6], [3, 5], [1, 3, 4], [2, 3, 3],
                 9, [4, 5], [2, 3, 4], [3, 3, 3],
                 10, [5, 5], [3, 3, 4],
                 [5, 6], [3, 4, 4],
                 12, [6, 6], [4, 4, 4], [3, 3, 3, 3],
                 ],
            132:[1,
                 2,
                 3,
                 4, [1, 3],
                 5, [2, 3],
                 6,
                 ],
            180:[1, 2, 3, 4, 6],
            400:[1, 2, 3, 4],
            999:[1, 2]
        },
        'divisionPenaltyMap': {
            1:0.0,
            2:0.0,
            3:0.0,
            4:0.0,
            5:0.02,
            6:0.02,
            7:0.025,
            8:0.0,
            9:0.03,
            10:0.04,
            11:0.1,
            12:0.1,
            13:0.2,
            14:0.1,
            16:0.0,
       },
        'nestedTuples': True,
        'numNestedTuplesPenalty': [0, 0.0, 0.05, 0.4, 0.5, 0.8],
    },
    'medium': {
        'possibleDivisionsByTempo': {
            30: [],
            63: [1,
                 2,
                 3,
                 4, [1, 3],
                 5, [2, 3], [1, 1, 3], [1, 2, 2],
                 6, [1, 5], [1, 1, 4], [1, 2, 3],
                 7, [2, 5], [3, 4], [1, 2, 4], [2, 2, 3],
                 8, [3, 5], [1, 2, 5], [1, 3, 4], [2, 3, 3],
                 9, [4, 5], [1, 3, 5], [2, 2, 5], [2, 3, 4],
                 10, [5, 5], [2, 3, 5], [2, 4, 4], [3, 3, 4],
                 [5, 6], [2, 4, 5], [3, 3, 5], [3, 4, 4],
                 12, [3, 4, 5], [4, 4, 4],
                 [6, 7], [4, 4, 5],
                 14, [7, 7], [4, 5, 5],
                 [8, 8]
            ],
            80: [1,
                 2,
                 3,
                 4, [1, 3],
                 5, [2, 3], [1, 1, 3], [1, 2, 2],
                 6, [1, 5], [3, 3], [1, 2, 3],
                 7, [2, 5], [3, 4], [1, 2, 4], [2, 2, 3],
                 8, [3, 5], [1, 3, 4], [2, 3, 3],
                 9, [4, 5], [2, 3, 4],
                 10, [5, 5], [3, 3, 4],
                 [5, 6], [3, 4, 4],
                 12, [4, 4, 4],
                 ],
            100: [1,
                  2,
                  3,
                  4, [1, 3],
                  5, [2, 3], [1, 1, 3], [1, 2, 2],
                  6, [1, 5], [3, 3],
                  7, [2, 5], [3, 4], [2, 2, 3],
                  8, [2, 3, 3],
                  9, [4, 5],
                  10],
            132: [1, 2, 3, 4, 5, 6, 8],
            180: [1, 2, 3, 4, 6, 8],
            300: [1, 2, 3, 4],
            999: [1]
        },
        'divisionPenaltyMap': {
            1: 0.0,
            2: 0.0,
            3: 0.0,
            4: 0.02,
            5: 0.04,
            6: 0.02,
            7: 0.05,
            8: 0.02,
            9: 0.05,
            10: 0.07,
            11: 0.3,
            12: 0.1,
            13: 0.3,
            14: 0.1,
            16: 0.4
        }
    },
    'low': {
        'possibleDivisionsByTempo': {
            30: [],
            52: [1, 2, 3, 4, 5, [2, 3], 6, [3, 4], [4, 4], 9, [4, 5], [5, 5],
                 [4, 4, 4], [8, 8]],
            80: [1, 2, 3, 4, 5, [2, 3], 6, [4, 4], [4, 5], [5, 5], [4, 4, 4]],
            100: [1, 2, 3, 4, 5, 6, [4,4]],
            132: [1, 2, 3, 4, 5, 6],
            160: [1, 2, 3, 4],
            200: [1, 2, 3],
            999: [1]
        },
        'divisionPenaltyMap': {
            1: 0.0,
            2: 0.0,
            3: 0.0,
            4: 0.02,
            5: 0.04,
            6: 0.02,
            7: 0.05,
            8: 0.02,
            9: 0.05,
            10: 0.07,
            11: 0.3,
            12: 0.1,
            13: 0.3,
            14: 0.1,
            16: 0.4
        }
    }
}


# how to divide an irregular duration into regular parts
# Regular durations are those which can be expressed via
# a quarter, eighth, 1/16 note, or any dotted or double
# dotted variation thereof
slotDivisionStrategy = {
    5: (4, 1),
    9: (8, 1),
    10: (8, 2),
    11: (8, 3),
    13: (12, 1),
    15: (12, 3),
    17: (16, 1),
    18: (16, 2),
    19: (16, 3),
    20: (16, 4),
    21: (16, 4, 1),
    22: (16, 6),
    23: (16, 4, 3),
    25: (16, 8, 1)
}


# these are ratios to convert a duration back to its representation
# if a notation has an effective duration of 1/5 (one 16th of a 5-subdivision),
# applying the ratio 5/4 will convert it to 1/4, i.e, a 16th note
# the ratio can then be used to generate the needed subdivision by the notation
# backend
durationRatios = {
    1: (1, 1),
    2: (1, 1),
    3: (3, 2),
    4: (1, 1),
    5: (5, 4),
    6: (3, 2),
    7: (7, 4),
    8: (1, 1),
    9: (9, 8),
    10: (5, 4),
    11: (11, 8),
    12: (3, 2),
    13: (13, 8),
    14: (7, 4),
    15: (15, 8),
    16: (1, 1),
    17: (17, 16),
    18: (9, 8),
    19: (19, 16),
    20: (5, 4),
    21: (21, 16),
    22: (11, 8),
    23: (23, 16),
    24: (3, 2),
    25: (5, 4),
    26: (13, 8),
    27: (27, 16),
    28: (7, 4),
    29: (29, 16),
    30: (5, 4),
    31: (31, 16),
    32: (1, 1)
}
