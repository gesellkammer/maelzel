# A quantization preset consists of presetname.key, where needed keys are:
# divisionsByTempo and divisionPenaltyMap

complexityPresets = {
    # Possible divisions of a pulse, depending on the tempo for the given pulse
    # These are always simple pulses (quarter note, 8th note, etc.)
    'high': {
        'divisionsByTempo': {
            40:[],
            63:[1, 2, 3,
                4, [1, 3],
                5, [2, 3],
                6, [1, 5],
                7, [1, 1, 5], [1, 2, 4], [2, 2, 3], [2, 5], [3, 4],
                8, [1, 1, 6], [1, 2, 5], [1, 3, 4], [2, 3, 3], [3, 5],
                9, [1, 1, 7], [1, 2, 6], [1, 3, 5], [2, 2, 5], [2, 3, 4], [4, 5],
                10, [1, 3, 6], [2, 2, 6], [2, 3, 5], [3, 3, 5], [4, 6], [5, 6],
                12, 14, [8, 8]],
            80:[1, 2, 3, 4,
                5, [2, 3],
                6, [1, 5],
                7, [2, 5], [2, 2, 3], [3, 4],
                8, [1, 3, 4], [3, 5],
                9, [4, 5],
                10, [5, 6], 12],
            100:[1, 2, 3, 4, 5, [2, 3], 6, 7, [3, 4], 8, 9, 10],
            132:[1, 2, 3, 4, 5, 6],
            180:[1, 2, 3, 4],
            200:[1, 2, 3],
            999:[1]
        },
        'divisisionPenaltyMap': {
            1:0.0,
            2:0.0,
            3:0.0,
            4:0.02,
            5:0.02,
            6:0.02,
            7:0.02,
            8:0.02,
            9:0.02,
            10:0.03,
            11:0.1,
            12:0.1,
            13:0.2,
            14:0.1,
            16:0.4
        }
    },
    'middle': {
        'divisionsByTempo': {
            30: [],
            63: [1, 2, 3, 4,
                 5, [2, 3],
                 6,
                 7, [1, 1, 5], [2, 2, 3], [2, 5], [3, 4],
                 8, [1, 2, 5], [2, 3, 3], [3, 5],
                 9, [1, 3, 5], [4, 5], [2, 2, 5],
                 10, [2, 3, 5], [5, 6], [3, 3, 5],
                 12, 14, [8, 8] ],
            80: [1, 2, 3, 4, 5, [2, 3], 6, 7, [2, 5], [2, 2, 3], [3, 4], 8, [3, 5], 9, [4, 5], 10, [5, 6], 12],
            100: [1, 2, 3, 4, 5, [2, 3], 6, 7, [3, 4], 8, 9, 10],
            132: [1, 2, 3, 4, 5, 6],
            180: [1, 2, 3, 4],
            200: [1, 2, 3],
            999: [1]
        },
        'divisionPenaltyMap': {
            1: 0.0,
            2: 0.0,
            3: 0.0,
            4: 0.02,
            5: 0.04,
            6: 0.02,
            7: 0.05,
            8: 0.02,
            9: 0.05,
            10: 0.07,
            11: 0.3,
            12: 0.1,
            13: 0.3,
            14: 0.1,
            16: 0.4
        }
    },
    'low': {
        'divisionsByTempo': {
            30: [],
            52: [1, 2, 3, 4, 5, [2, 3], 6, [3, 4], [4, 4], 9, [4, 5], [5, 5],
                 [4, 4, 4], [8, 8]],
            80: [1, 2, 3, 4, 5, [2, 3], 6, [4, 4], [4, 5], [5, 5], [4, 4, 4]],
            100: [1, 2, 3, 4, 5, 6, [4,4]],
            132: [1, 2, 3, 4, 5, 6],
            160: [1, 2, 3, 4],
            200: [1, 2, 3],
            999: [1]
        },
        'divisionPenaltyMap': {
            1: 0.0,
            2: 0.0,
            3: 0.0,
            4: 0.02,
            5: 0.04,
            6: 0.02,
            7: 0.05,
            8: 0.02,
            9: 0.05,
            10: 0.07,
            11: 0.3,
            12: 0.1,
            13: 0.3,
            14: 0.1,
            16: 0.4
        }
    }
}


# how to divide an irregular duration into regular parts
# Regular durations are those which can be expressed via
# a quarter, eighth, 1/16 note, or any dotted or double
# dotted variation thereof
slotDivisionStrategy = {
    5: (4, 1),
    9: (8, 1),
    10: (8, 2),
    11: (8, 3),
    13: (12, 1),
    15: (12, 3),
    17: (16, 1),
    18: (16, 2),
    19: (16, 3),
    20: (16, 4),
    21: (16, 4, 1),
    22: (16, 6),
    23: (16, 4, 3),
    25: (16, 8, 1)
}


# these are ratios to convert a duration back to its representation
# if a notation has an effective duration of 1/5 (one 16th of a 5-tuplet),
# applying the ratio 5/4 will convert it to 1/4, i.e, a 16th note
# the ratio can then be used to generate the needed tuplet by the notation
# backend
durationRatios = {
    1: (1, 1),
    2: (1, 1),
    3: (3, 2),
    4: (1, 1),
    5: (5, 4),
    6: (3, 2),
    7: (7, 4),
    8: (1, 1),
    9: (9, 8),
    10: (5, 4),
    11: (11, 8),
    12: (3, 2),
    13: (13, 8),
    14: (7, 4),
    15: (15, 8),
    16: (1, 1),
    17: (17, 16),
    18: (9, 8),
    19: (19, 16),
    20: (5, 4),
    21: (21, 16),
    22: (11, 8),
    23: (23, 16),
    24: (3, 2),
    25: (5, 4),
    26: (13, 8),
    27: (27, 16),
    28: (7, 4),
    29: (29, 16),
    30: (5, 4),
    31: (31, 16),
    32: (1, 1)
}
